//***************************************************************************************
// LAB 4: TIMERS AND PWM
//
// MSP430FR2311 Software PWM
//
// Description: Debounced LED Button Blink with software PWM. LED1 is at 50% duty cycle,
//              LED2 is at 100% (relative to CCR0).
//
// ACLK = n/a, MCLK = SMCLK = default DCO
//
//           MSP430FR2311
//           -----------
//        /|\|      XIN|-
//         | |         |
//         --|RST  XOUT|-
//           |     P1.0|-->LED1
// BUTTON2-->|P1.1 P2.0|-->LED2
//
// Damon Boorstein
// Rowan University
// Date Created: October 8, 2017
// Date Updated: October 9, 2017
//
// Built with Code Composer Studio v7.2.0
//***************************************************************************************

#include <msp430fr2311.h>

#define LED     BIT0
#define BUTTON  BIT1

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD; // Stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5; // Disable GPIO default mode

    P1DIR |= LED; // Set P1.0 to output
    P2DIR |= LED;
    P1OUT &= ~LED; // Turn LED2 off
    P1REN |= BUTTON; // Enable puller resistor for button-pin
    P1OUT |= BUTTON; // Sets resistor to pull up for button

    P1IES &= ~BUTTON; // Interrupts when button is released
    P1IE |= BUTTON; // Interrupt enable
    P1IFG &= ~BUTTON; // Clear interrupt flag

    TB0CCTL0 = CCIE; // CCR0 interrupt enabled
    TB0CCR0 = 1000; // Duty cycle
    TB0CTL = TBSSEL__SMCLK + MC__STOP + TBCLR; // SMCLK, Stop, clear TB0R

    TB0CCTL1 = CCIE; // CCR1 interrupt enabled
    TB0CCR0 = 500; // 50% duty cycle
    TB0CTL = TBSSEL__SMCLK + MC__UP + TBCLR; // SMCLK, Stop, clear TB0R

    TB1CCTL0 = CCIE;
    TB1CCR0 = 60000;
    TB1CTL = TBSSEL__SMCLK + MC__UP;


    __enable_interrupt();

    __bis_SR_register(LPM0 + GIE); // LPM0 w/ general interrupts enabled

    for(;;){}

}

// Port 1 interrupt routine
#pragma vector = PORT1_VECTOR
__interrupt void Port_1(void){
    P1OUT ^= LED; // Toggle LED
    P2OUT ^= LED;
    P1IE &= ~BUTTON; // Clear interrupt
    TB0CTL = TBSSEL_2 + MC_1 + TBCLR; // SMCLK, Up, clear TA0R
    P1IFG &= ~BUTTON; //Clears interupt flag register needed otherwise will be stuck in infinite loop
}

// Timer A0 ISR
#pragma vector=TIMER1_B0_VECTOR
__interrupt void Timer1_B0(void){
    TB0CTL = MC_0; // Stop timer
    P2IE |= BUTTON; // Enable interrupt
    P2IFG &= ~BUTTON; // Clear interrupt flag

    P1IE |= BUTTON;
    P1IFG &= ~BUTTON;
}

#pragma vector=TIMER0_B1_VECTOR
__interrupt void Timer0_B1_ISR (void)
{
    if(TB0CCR1 != 1000)
    {
       P1OUT &= ~LED;
    }
    TB0CCTL1 &= ~CCIFG;    // Clear CCR interrupt flag
}

#pragma vector=TIMER0_B0_VECTOR
__interrupt void Timer0_B0_ISR (void)
{
    P1OUT |= LED;
    TB0CCTL0 &= ~CCIFG;    // Clear CCR interrupt flag
}
